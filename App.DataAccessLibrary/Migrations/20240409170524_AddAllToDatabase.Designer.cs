// <auto-generated />
using System;
using App.DataAccessLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.DataAccessLibrary.Migrations
{
    [DbContext(typeof(HealthInsuranceMGMT))]
    [Migration("20240409170524_AddAllToDatabase")]
    partial class AddAllToDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Models.Models.AdminLogin", b =>
                {
                    b.Property<int>("Adm_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Adm_ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdminAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPhotourl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Adm_ID");

                    b.ToTable("AdminLogin");

                    b.HasData(
                        new
                        {
                            Adm_ID = 1,
                            Address = "123 Admin St, Admin City",
                            AdminAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(3019),
                            AdminName = "Syed Kashan Abbas Naqvi",
                            AdminPassword = "kashan110",
                            AdminPhotourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            ConfirmPassword = "kashan110",
                            Email = "kashan2209e@aptechgdn.net",
                            Phone = "1234567890",
                            Role = "Admin"
                        },
                        new
                        {
                            Adm_ID = 2,
                            Address = "456 Admin Lane, Admin Town",
                            AdminAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(3022),
                            AdminName = "Asghar Abbas",
                            AdminPassword = "asghar110",
                            AdminPhotourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            ConfirmPassword = "asghar110",
                            Email = "asghar2209e@aptechgdn.net",
                            Phone = "0987654321",
                            Role = "Admin"
                        },
                        new
                        {
                            Adm_ID = 3,
                            Address = "456 Admin Lane, Admin Town",
                            AdminAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(3024),
                            AdminName = "Ali Shan",
                            AdminPassword = "alishan110",
                            AdminPhotourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            ConfirmPassword = "alishan110",
                            Email = "alishan2209e@aptechgdn.net",
                            Phone = "0987654321",
                            Role = "Admin"
                        },
                        new
                        {
                            Adm_ID = 4,
                            Address = "456 Admin Lane, Admin Town",
                            AdminAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(3088),
                            AdminName = "Zayaan Zubair",
                            AdminPassword = "zaayan110",
                            AdminPhotourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            ConfirmPassword = "zaayan110",
                            Email = "zaayan220901e@aptechgdn.net",
                            Phone = "0987654321",
                            Role = "Admin"
                        },
                        new
                        {
                            Adm_ID = 5,
                            Address = "456 Admin Lane, Admin Town",
                            AdminAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(3091),
                            AdminName = "Waleed Hoth",
                            AdminPassword = "waleed110",
                            AdminPhotourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            ConfirmPassword = "waleed110",
                            Email = "waleed2209e@aptechgdn.net",
                            Phone = "0987654321",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("App.Models.Models.Contact", b =>
                {
                    b.Property<int>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contact_Id"));

                    b.Property<DateTime>("Contact_Added")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Contact_Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("App.Models.Models.EmpRegister", b =>
                {
                    b.Property<int>("empno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("empno"));

                    b.Property<DateTime>("EmployeeAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Employee_Pictureurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("contactno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("joindate")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("policystatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("empno");

                    b.HasIndex("PolicyId");

                    b.ToTable("EmpRegister");

                    b.HasData(
                        new
                        {
                            empno = 1,
                            EmployeeAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2972),
                            Employee_Pictureurl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            PolicyId = 1,
                            Role = "Employee",
                            Salary = 80000,
                            address = "456 Developer Rd.",
                            city = "DevCity",
                            contactno = "0987654321",
                            country = "TechLand",
                            designation = "Software Engineer",
                            firstname = "John",
                            joindate = new DateTime(2023, 12, 31, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2974),
                            lastname = "Doe",
                            password = "password",
                            policystatus = "Active",
                            state = "TechState",
                            username = "johndoe"
                        },
                        new
                        {
                            empno = 2,
                            EmployeeAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2982),
                            Employee_Pictureurl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            PolicyId = 2,
                            Role = "Employee",
                            Salary = 95000,
                            address = "789 Project Blvd.",
                            city = "ManageCity",
                            contactno = "1234567890",
                            country = "LeadLand",
                            designation = "Project Manager",
                            firstname = "Alice",
                            joindate = new DateTime(2023, 9, 22, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2983),
                            lastname = "Johnson",
                            password = "securepassword",
                            policystatus = "Active",
                            state = "ManageState",
                            username = "alicejohnson"
                        },
                        new
                        {
                            empno = 3,
                            EmployeeAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2986),
                            Employee_Pictureurl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            PolicyId = 3,
                            Role = "Employee",
                            Salary = 70000,
                            address = "101 QA Lane",
                            city = "TestCity",
                            contactno = "2345678901",
                            country = "QualityLand",
                            designation = "QA Engineer",
                            firstname = "Bob",
                            joindate = new DateTime(2023, 11, 11, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2987),
                            lastname = "Smith",
                            password = "testpassword",
                            policystatus = "Active",
                            state = "TestState",
                            username = "bobsmith"
                        },
                        new
                        {
                            empno = 4,
                            EmployeeAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2989),
                            Employee_Pictureurl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            PolicyId = 2,
                            Role = "Employee",
                            Salary = 85000,
                            address = "404 DevOps Way",
                            city = "OpsCity",
                            contactno = "3456789012",
                            country = "DeployLand",
                            designation = "DevOps Specialist",
                            firstname = "Carol",
                            joindate = new DateTime(2023, 12, 11, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2990),
                            lastname = "Williams",
                            password = "devopspass",
                            policystatus = "Active",
                            state = "OpsState",
                            username = "carolw"
                        },
                        new
                        {
                            empno = 5,
                            EmployeeAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2992),
                            Employee_Pictureurl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            PolicyId = 1,
                            Role = "Employee",
                            Salary = 75000,
                            address = "202 Design St.",
                            city = "DesignCity",
                            contactno = "4567890123",
                            country = "CreativeLand",
                            designation = "UI/UX Designer",
                            firstname = "Dave",
                            joindate = new DateTime(2023, 10, 12, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2993),
                            lastname = "Brown",
                            password = "designpass",
                            policystatus = "Active",
                            state = "DesignState",
                            username = "davebrown"
                        });
                });

            modelBuilder.Entity("App.Models.Models.HospitalInfo", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<DateTime>("HospitalInfoAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNO")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HospitalId");

                    b.ToTable("HospitalInfo");
                });

            modelBuilder.Entity("App.Models.Models.InsuranceCompany", b =>
                {
                    b.Property<int>("Ins_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ins_Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompantWebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ins_CompanyLogourl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ins_Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Ins_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsuranceCompanyAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ins_Id");

                    b.ToTable("InsuranceCompany");

                    b.HasData(
                        new
                        {
                            Ins_Id = 1,
                            Address = "123 Insurance Lane",
                            CompantWebsiteUrl = "https://www.healthguard.com",
                            Ins_CompanyLogourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            Ins_Description = "Comprehensive health insurance for all your needs.",
                            Ins_Name = "HealthGuard",
                            InsuranceCompanyAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2762),
                            Phone = "1234567890"
                        },
                        new
                        {
                            Ins_Id = 2,
                            Address = "123 Insurance Lane",
                            CompantWebsiteUrl = "https://www.healthguard.com",
                            Ins_CompanyLogourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            Ins_Description = "Comprehensive health i for all your needs.",
                            Ins_Name = "HealtyLife",
                            InsuranceCompanyAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2776),
                            Phone = "1234567890"
                        },
                        new
                        {
                            Ins_Id = 3,
                            Address = "12334 Insurance Lane",
                            CompantWebsiteUrl = "https://www.healthguard.com",
                            Ins_CompanyLogourl = "4799de3c-69c5-442c-813c-9d166c2d30dd_catpicture.jpg",
                            Ins_Description = "Life is Great do all Work.",
                            Ins_Name = "Pure Life",
                            InsuranceCompanyAdded = new DateTime(2024, 4, 9, 22, 5, 23, 767, DateTimeKind.Local).AddTicks(2777),
                            Phone = "1234567890"
                        });
                });

            modelBuilder.Entity("App.Models.Models.Policies", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"));

                    b.Property<int>("Ins_Id")
                        .HasColumnType("int");

                    b.Property<string>("MedicalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolicyDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("PolicyFullAmount")
                        .HasColumnType("float");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolicyTermasandConditionsurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("equatedmonthlyinstalment")
                        .HasColumnType("float");

                    b.Property<double>("policymonths")
                        .HasColumnType("float");

                    b.HasKey("PolicyId");

                    b.HasIndex("Ins_Id");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            PolicyId = 1,
                            Ins_Id = 1,
                            MedicalId = "MED123",
                            PolicyDescription = "Covers all medical expenses for your family.",
                            PolicyFullAmount = 500000.0,
                            PolicyName = "Family Health Plan",
                            PolicyTermasandConditionsurl = "~/documents/Instagram for Business Guide 2023.pdf",
                            equatedmonthlyinstalment = 15000.0,
                            policymonths = 36.0
                        },
                        new
                        {
                            PolicyId = 2,
                            Ins_Id = 2,
                            MedicalId = "MED234",
                            PolicyDescription = "Personal health insurance plan for individuals.",
                            PolicyFullAmount = 200000.0,
                            PolicyName = "Individual Health Plan",
                            PolicyTermasandConditionsurl = "~/documents/Instagram for Business Guide 2023.pdf",
                            equatedmonthlyinstalment = 5500.0,
                            policymonths = 24.0
                        },
                        new
                        {
                            PolicyId = 3,
                            Ins_Id = 2,
                            MedicalId = "MED345",
                            PolicyDescription = "Comprehensive dental care for families and individuals.",
                            PolicyFullAmount = 100000.0,
                            PolicyName = "Dental Care Plan",
                            PolicyTermasandConditionsurl = "~/documents/Instagram for Business Guide 2023.pdf",
                            equatedmonthlyinstalment = 4000.0,
                            policymonths = 12.0
                        },
                        new
                        {
                            PolicyId = 4,
                            Ins_Id = 3,
                            MedicalId = "MED456",
                            PolicyDescription = "Insurance coverage for eye care and vision health.",
                            PolicyFullAmount = 75000.0,
                            PolicyName = "Vision Care Plan",
                            PolicyTermasandConditionsurl = "~/documents/Instagram for Business Guide 2023.pdf",
                            equatedmonthlyinstalment = 3100.0,
                            policymonths = 12.0
                        },
                        new
                        {
                            PolicyId = 5,
                            Ins_Id = 1,
                            MedicalId = "MED567",
                            PolicyDescription = "Emergency health coverage for unexpected medical needs.",
                            PolicyFullAmount = 300000.0,
                            PolicyName = "Emergency Health Plan",
                            PolicyTermasandConditionsurl = "~/documents/Instagram for Business Guide 2023.pdf",
                            equatedmonthlyinstalment = 8300.0,
                            policymonths = 18.0
                        });
                });

            modelBuilder.Entity("App.Models.Models.PolicyRequestDetails", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int?>("EmpRegisterempno")
                        .HasColumnType("int");

                    b.Property<int?>("PoliciesPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("empno")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("EmpRegisterempno");

                    b.HasIndex("PoliciesPolicyId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("empno");

                    b.ToTable("PolicyRequestDetails");
                });

            modelBuilder.Entity("App.Models.Models.EmpRegister", b =>
                {
                    b.HasOne("App.Models.Models.Policies", "Policies")
                        .WithMany("EmpRegister")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policies");
                });

            modelBuilder.Entity("App.Models.Models.Policies", b =>
                {
                    b.HasOne("App.Models.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany("Policies")
                        .HasForeignKey("Ins_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");
                });

            modelBuilder.Entity("App.Models.Models.PolicyRequestDetails", b =>
                {
                    b.HasOne("App.Models.Models.EmpRegister", null)
                        .WithMany("PolicyRequestDetails")
                        .HasForeignKey("EmpRegisterempno");

                    b.HasOne("App.Models.Models.Policies", null)
                        .WithMany("PolicyRequestDetails")
                        .HasForeignKey("PoliciesPolicyId");

                    b.HasOne("App.Models.Models.Policies", "Policies")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Models.Models.EmpRegister", "EmpRegister")
                        .WithMany()
                        .HasForeignKey("empno")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EmpRegister");

                    b.Navigation("Policies");
                });

            modelBuilder.Entity("App.Models.Models.EmpRegister", b =>
                {
                    b.Navigation("PolicyRequestDetails");
                });

            modelBuilder.Entity("App.Models.Models.InsuranceCompany", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("App.Models.Models.Policies", b =>
                {
                    b.Navigation("EmpRegister");

                    b.Navigation("PolicyRequestDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
